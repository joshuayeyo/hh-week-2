// Ìñ•ÏÉÅÎêú Ïù¥Î≤§Ìä∏ Ïπ¥Îìú Ïª¥Ìè¨ÎÑåÌä∏ ÌÖåÏä§Ìä∏
import { render, screen } from '@testing-library/react';
import { describe, it, expect } from 'vitest';

import { EnhancedEventCard } from '@/components/EnhancedEventCard';
import { EventProps } from '@/types/events/Event.types';

describe('EnhancedEventCard Ïª¥Ìè¨ÎÑåÌä∏', () => {
  const baseEvent: EventProps = {
    id: '1',
    title: 'ÌÖåÏä§Ìä∏ ÏùºÏ†ï',
    date: '2024-10-29',
    startTime: '09:00',
    endTime: '10:00',
    description: 'ÌÖåÏä§Ìä∏ ÏÑ§Î™Ö',
    location: 'ÌÖåÏä§Ìä∏ Ïû•ÏÜå',
    category: 'ÏóÖÎ¨¥',
    repeat: {
      type: 'none',
      interval: 1,
    },
    notificationTime: 10,
  };

  it('Î∞òÎ≥µ ÏùºÏ†ïÏóê ÎåÄÌï¥ Î∞òÎ≥µ ÏïÑÏù¥ÏΩòÏù¥ ÌëúÏãúÎêòÏñ¥Ïïº Ìï®', () => {
    const recurringEvent: EventProps = {
      ...baseEvent,
      repeat: {
        type: 'daily',
        interval: 1,
      },
    };

    render(
      <EnhancedEventCard
        event={recurringEvent}
        isNotified={false}
      />
    );

    expect(screen.getByText('üìÖ')).toBeInTheDocument();
    expect(screen.getByLabelText('Îß§Ïùº Î∞òÎ≥µ ÏùºÏ†ï')).toBeInTheDocument();
    expect(screen.getByText('ÌÖåÏä§Ìä∏ ÏùºÏ†ï')).toBeInTheDocument();
  });

  it('ÏùºÎ∞ò ÏùºÏ†ïÏóê ÎåÄÌï¥ Î∞òÎ≥µ ÏïÑÏù¥ÏΩòÏù¥ ÌëúÏãúÎêòÏßÄ ÏïäÏïÑÏïº Ìï®', () => {
    render(
      <EnhancedEventCard
        event={baseEvent}
        isNotified={false}
      />
    );

    expect(screen.queryByLabelText(/Î∞òÎ≥µ ÏùºÏ†ï/)).not.toBeInTheDocument();
    expect(screen.getByText('ÌÖåÏä§Ìä∏ ÏùºÏ†ï')).toBeInTheDocument();
  });

  it('ÏïåÎ¶ºÏù¥ ÏûàÎäî Î∞òÎ≥µ ÏùºÏ†ïÏóê ÎåÄÌï¥ Îëê ÏïÑÏù¥ÏΩòÏù¥ Î™®Îëê ÌëúÏãúÎêòÏñ¥Ïïº Ìï®', () => {
    const recurringEvent: EventProps = {
      ...baseEvent,
      repeat: {
        type: 'weekly',
        interval: 1,
      },
    };

    render(
      <EnhancedEventCard
        event={recurringEvent}
        isNotified={true}
      />
    );

    expect(screen.getByTestId('NotificationsIcon')).toBeInTheDocument();
    expect(screen.getByText('üìÜ')).toBeInTheDocument();
    expect(screen.getByLabelText('Îß§Ï£º Î∞òÎ≥µ ÏùºÏ†ï')).toBeInTheDocument();
  });

  it('Îß§Ïõî Î∞òÎ≥µ ÏùºÏ†ïÏùò ÏïÑÏù¥ÏΩòÏù¥ Ïò¨Î∞îÎ•¥Í≤å ÌëúÏãúÎêòÏñ¥Ïïº Ìï®', () => {
    const monthlyEvent: EventProps = {
      ...baseEvent,
      repeat: {
        type: 'monthly',
        interval: 2,
      },
    };

    render(
      <EnhancedEventCard
        event={monthlyEvent}
        isNotified={false}
      />
    );

    expect(screen.getByText('üóìÔ∏è')).toBeInTheDocument();
    expect(screen.getByLabelText('2Í∞úÏõîÎßàÎã§ Î∞òÎ≥µ ÏùºÏ†ï')).toBeInTheDocument();
  });

  it('Îß§ÎÖÑ Î∞òÎ≥µ ÏùºÏ†ïÏùò ÏïÑÏù¥ÏΩòÏù¥ Ïò¨Î∞îÎ•¥Í≤å ÌëúÏãúÎêòÏñ¥Ïïº Ìï®', () => {
    const yearlyEvent: EventProps = {
      ...baseEvent,
      repeat: {
        type: 'yearly',
        interval: 1,
      },
    };

    render(
      <EnhancedEventCard
        event={yearlyEvent}
        isNotified={false}
      />
    );

    expect(screen.getByText('üìù')).toBeInTheDocument();
    expect(screen.getByLabelText('Îß§ÎÖÑ Î∞òÎ≥µ ÏùºÏ†ï')).toBeInTheDocument();
  });

  it('Î∞òÎ≥µ ÏùºÏ†ï Ïπ¥ÎìúÏóê Ïä§ÌÉÄÏùºÏù¥ Ï†ÅÏö©ÎêòÏñ¥Ïïº Ìï®', () => {
    const recurringEvent: EventProps = {
      ...baseEvent,
      repeat: {
        type: 'daily',
        interval: 1,
      },
    };

    const { container } = render(
      <EnhancedEventCard
        event={recurringEvent}
        isNotified={false}
      />
    );

    const cardContainer = container.querySelector('.enhanced-event-card');
    expect(cardContainer).toHaveStyle('position: relative');
  });

  it('Î∞òÎ≥µ ÏïÑÏù¥ÏΩòÏù¥ Ïò¨Î∞îÎ•∏ ÏúÑÏπòÏóê Î∞∞ÏπòÎêòÏñ¥Ïïº Ìï®', () => {
    const recurringEvent: EventProps = {
      ...baseEvent,
      repeat: {
        type: 'daily',
        interval: 1,
      },
    };

    const { container } = render(
      <EnhancedEventCard
        event={recurringEvent}
        isNotified={true}
      />
    );

    const iconContainer = container.querySelector(
      '[style*="position: absolute"]'
    );
    expect(iconContainer).toBeInTheDocument();
    expect(iconContainer).toHaveStyle('top: 4px');
    expect(iconContainer).toHaveStyle('right: 4px');
  });

  it('Ï†ëÍ∑ºÏÑ± ÏÜçÏÑ±Ïù¥ Ïò¨Î∞îÎ•¥Í≤å ÏÑ§Ï†ïÎêòÏñ¥Ïïº Ìï®', () => {
    const recurringEvent: EventProps = {
      ...baseEvent,
      repeat: {
        type: 'daily',
        interval: 1,
      },
    };

    render(
      <EnhancedEventCard
        event={recurringEvent}
        isNotified={false}
      />
    );

    const recurringIcon = screen.getByLabelText('Îß§Ïùº Î∞òÎ≥µ ÏùºÏ†ï');
    expect(recurringIcon).toHaveAttribute('role', 'img');
  });
});
